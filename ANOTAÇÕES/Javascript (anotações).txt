COMANDOS IMPORTANTES DE JAVASCRIPT

SELECIONAR ELEMENTO(S) COM O QUERYSELECTOR
  elementoSelecionado.querySelector(“h1”)   
  elementoSelecionado.querySelector(“#titulo”) (seleciona pelo id “titulo”)
  elementoSelecionado.querySelectorAll(“h1”)  (seleciona todos os h1)



ADICIONAR E REMOVER CLASSES
  elementoSelecionado.classList.add(“nome da classe”)
  elementoSelecionado.classList.Remove(“nome da classe”)






ESCUTADOR DE EVENTOS
  elementoSelecionado.addEventListener(“evento”, nomeDaFunção)







ARROW FUNCTION (FUNÇÃO ANÔNIMA)
  const minhaFuncao = (...) =>  uma ação qualquer…
  const minhaFuncao = (...) =>  {duas ou mais ações quaisquer…}
  // A variável passa a ser a referência da função
  // As chaves são obrigatórias caso haja duas ou mais ações dentro do bloco de códigos da função.








EVENTOS
  Método 1: <p onMouseOver = “minhaFuncao()”></p>
  Método 2:  elementoSelecionado.addEventListener(“MouseOver”, minhaFuncao)
  // Alguns eventos: onLoad, onMouseOver, onClick, onFocus, onFocusOut, onKeyPress… 







REPETIÇÃO
  for (n of nomes){console.log(n)} //Retorna os valores encontrados
  for (n in nomes){console.log(n)} //Retorna os índices encontrados







REPETIÇÃO FOR EACH
  array.forEach(function(elemento, index, array){console.log(elemento)};
    // Alternativa ao loop FOR.
    // argumento 1 é obrigatório.
    // “index” e “array” são parâmetros opcionais.







REPETIÇÃO MAP
  Método 1: array.map((elemento,index,array) => {console.log(elemento)})
  Método 2: const exibir = (elemento, index, array) => {console.log(elemento)}
            array.map(exibir)
  // MAP percorre todos os elementos sem interrupção.
  // argumento 1 é obrigatório.
  // “index” e “array” são parâmetros opcionais.








OPERADOR CONDICIONAL TERNÁRIO
  condição ? comandos se verdadeiro : comandos se falso









CRIANDO E ADICIONANDO ELEMENTO HTML
  Criação: let x = document.createElement("p")
  Exemplo 1: document.body.appendChild(x)
  Exemplo 2: elementoPaiSelecionado.appendChild(x)








MODULOS JAVASCRIPT - usado para organizar blocos de códigos em diferentes arquivos para melhor manutenção e organização
  Passo 1: export {x} 		(no arquivo 1)
  Passo 2: import {x} from "pasta/arquivo1.js"		(em outro arquivo qualquer)







COLEÇÃO MAP
  let lista = new Map();
  lista.set(chave,valor);    // Adiciona um valor (o valor pode repetir, as chaves não)
  lista.get();               // Pega um valor
  lista.has();               // Retorna true se a chave existir na coleção
  lista.delete();            // Apaga um valor pela chave
  lista.forEach();           // Percorre toda a coleção
  lista.clear();             // Apaga todos os elementos








COLEÇÃO SET (Não aceita elementos repetidos)
  let lista = new Map(["item 1", "item 2", "item 3");
  lista.add();          // Adiciona elementos
  lista.has();          // Retorna true se a chave existir na coleção
  lista.forEach();      // Percorre toda a coleção
  lista.delete();       // Apaga um elemento
  lista.clear();        // Apaga todos os elementos
